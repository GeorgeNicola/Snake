{"version":3,"sources":["Score.js","Pixel.js","Matrix.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","className","score","bestScore","Pixel","style","backgroundColor","color","Matrix","state","matrix","direction","x","y","speed","snake","directionCheck","food","event","keyCode","setState","diry","dirx","this","snakeLength","length","die","i","forceUpdate","addFood","grow","changeScore","k","Math","floor","random","newMatrix","newSnake","push","reset","createDefaultMatrix","createMatrix","Array","fill","document","addEventListener","e","keyboard","interval","setInterval","move","getPoint","snakeBump","removeEventListener","clearInterval","matrixColor","map","row","col","j","key","Component","App","bind","window","localStorage","setItem","newScore","changeBestScore","storedBestScore","Number","getItem","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7db98ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Score.css';\r\n\r\nconst Score = props => (\r\n    <div className=\"score-board\">\r\n        <p> Score: {props.score} </p>\r\n        <p> Best Score: {props.bestScore} </p> \r\n    </div>\r\n  );\r\n  \r\n  export default Score;","import React from 'react';\r\n\r\n\r\nconst Pixel = (props) => {\r\n    return(\r\n        <div className=\"pixel\" style={{backgroundColor: props.color}}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pixel;","import React, {Component} from 'react';\r\nimport Pixel from './Pixel';\r\nimport './Matrix.css';\r\n\r\nclass Matrix extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            state: 2,\r\n            // 1-before the game starts\r\n            // 2-play the game\r\n            // 3-stop the game\r\n            matrix: [],\r\n            direction: {\r\n                x: 0, \r\n                y: -1\r\n            },\r\n            speed: 250, //Speed in ms \r\n            snake:[\r\n                {\r\n                    x: 7,\r\n                    y: 5\r\n                },\r\n                {\r\n                    x: 6,\r\n                    y: 5\r\n                },\r\n                {\r\n                    x: 5,\r\n                    y: 5\r\n                }\r\n            ],//Snake's position\r\n            directionCheck: 1,//Change direction only once per interval\r\n            food: {\r\n                x: \"\",\r\n                y: \"\"\r\n            }//Food's position\r\n\r\n        }\r\n    }\r\n\r\n    keyboard(event, Matrix){\r\n        switch(event.keyCode){\r\n            case 37:\r\n                //console.log(\"Left Arrow\");\r\n                if(Matrix.state.direction.x !== 1 && Matrix.state.directionCheck === 1)\r\n                //Making sure the snake doesn't go backwards and moves only once per interval\r\n                    Matrix.setState({direction: { x: -1, y: 0} });\r\n                    Matrix.setState({directionCheck: 0});\r\n                break;//LEFT arrow\r\n            case 38:\r\n                //console.log(\"Up Arrow\");\r\n                if(Matrix.state.direction.y !== -1 && Matrix.state.directionCheck === 1)\r\n                    Matrix.setState({direction: { x: 0, y: 1} });\r\n                    Matrix.setState({directionCheck: 0});\r\n                break;//UP arrow\r\n            case 39:\r\n                //console.log(\"Right Arrow\");\r\n                if(Matrix.state.direction.x !== -1 && Matrix.state.directionCheck === 1)\r\n                    Matrix.setState({direction: { x: 1, y: 0} });\r\n                    Matrix.setState({directionCheck: 0});\r\n                break;//RIGHT arrow\r\n            case 40:\r\n                //console.log(\"Down Arrow\");\r\n                if(Matrix.state.direction.y !== 1 && Matrix.state.directionCheck === 1)\r\n                    Matrix.setState({direction: { x: 0, y: -1} });\r\n                    Matrix.setState({directionCheck: 0});\r\n                break;//DOWN arrow\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    move(diry = 0, dirx = 0){\r\n        const {snake, matrix} = this.state;//Object destructuring\r\n        let snakeLength = snake.length;\r\n        let x = snake[0].x - dirx;//Snake head position on x\r\n        let y = snake[0].y + diry;//Snake head position on y\r\n\r\n\r\n        if(x > 16 || x < 0 || y >=17 || y <=-1 ){\r\n            this.die();\r\n            //If shake bumps into a wall\r\n        }else{\r\n\r\n            matrix[snake[snakeLength-1].x][snake[snakeLength-1].y] = 0;\r\n            //Detele the snake's last element\r\n            for( let i = snake.length - 1; i >= 1; i--){\r\n                snake[i].x = snake[i-1].x;\r\n                snake[i].y = snake[i-1].y;\r\n                matrix[snake[i].x][snake[i].y] = 1;\r\n                this.forceUpdate();\r\n            }//Change snake's body positiona nd show it\r\n\r\n\r\n            matrix[x][y] = 1;//Show snake's head\r\n            snake[0].x = x;\r\n            snake[0].y = y;//Change head's position\r\n\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    getPoint(){\r\n        this.addFood();\r\n        this.grow();\r\n        this.setState({score: this.state.score+1});\r\n        this.props.changeScore(this.state.score);//Update score\r\n    }\r\n\r\n    addFood(){\r\n        //Random integer: Math.floor(Math.random() * (max - min + 1)) + min;\r\n        const {snake} = this.state;\r\n\r\n        let k=0, x,y; \r\n        while(k===0){\r\n            k=1;\r\n            x = Math.floor(Math.random() * (17));\r\n            y = Math.floor(Math.random() * (17));\r\n\r\n            for(let i=0;i<snake.length;i++){\r\n                if(snake[i].x === x) k=0; \r\n                if(snake[i].y === y) k=0; \r\n            }//Check if food spawns above the snake\r\n        }\r\n\r\n        this.setState({food:{x,y}});//Update food's position\r\n        let newMatrix = this.state.matrix;\r\n        newMatrix[x][y] = 2;\r\n        this.setState({matrix: newMatrix});\r\n    }\r\n\r\n    grow(){\r\n        let newSnake = this.state.snake;\r\n        newSnake.push({x: 0, y: 0});//Add new element to snake\r\n        this.setState({snake: newSnake});//Update snake's length\r\n    }\r\n\r\n    snakeBump(){\r\n        const {snake} = this.state;\r\n\r\n        for(let i=1;i<snake.length;i++){\r\n            if(snake[0].x === snake[i].x && snake[0].y === snake[i].y)\r\n                return 1;\r\n        }\r\n        return 0;\r\n    }//If snake bumps into himself\r\n\r\n    die(){\r\n        this.reset();\r\n    }\r\n\r\n    reset(){\r\n        let defaultSnake = [{x: 7, y: 5},{x: 6,y: 5},{x: 5,y: 5}];//Default Snake\r\n\r\n\r\n        this.setState({\r\n                score: 0,\r\n                state: 2,\r\n                matrix: [],\r\n                direction: {\r\n                    x: 0, \r\n                    y: -1\r\n                },\r\n                speed: 200, \r\n                snake: defaultSnake,\r\n                directionCheck: 1,\r\n                food: {\r\n                    x: \"\",\r\n                    y: \"\"\r\n                }\r\n        })//State's default values\r\n\r\n        this.createDefaultMatrix();//Refreshes the matrix\r\n        this.props.changeScore(this.state.score);//Update score\r\n    }\r\n\r\n    createDefaultMatrix(){\r\n        var createMatrix = [];\r\n        for(var i=0; i<17; i++) \r\n            createMatrix[i] = new Array(17).fill(0);\r\n\r\n        for(let i=0;i<this.state.snake.length;i++){\r\n            createMatrix[this.state.snake[i].x][this.state.snake[i].y] = 1;\r\n        }\r\n        this.setState({matrix: createMatrix});\r\n    }//Create the default board\r\n\r\n    componentDidMount(){\r\n        document.addEventListener(\"keydown\", (e) => this.keyboard(e, this) );//Button press listener\r\n\r\n        this.createDefaultMatrix();\r\n\r\n        this.interval = setInterval(() => {\r\n            const {state, food, snake, direction} = this.state;\r\n            this.setState({directionCheck: 1});//The player can change direction only once per interval\r\n\r\n            if(food.x === \"\" && food.y === \"\"){\r\n                this.addFood();\r\n            }//Add first food\r\n            \r\n            if(state === 2){\r\n                this.move(direction.x, direction.y);\r\n            }//If game had status 2, the run game\r\n\r\n            if(food.x === snake[0].x && food.y === snake[0].y){\r\n                this.getPoint();\r\n            }//Get food --> get point\r\n\r\n            if(this.snakeBump() === 1){\r\n                this.die();\r\n            }\r\n\r\n        }, this.state.speed);//Functions loop\r\n    }\r\n\r\n\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener(\"keydown\", (e) => this.keyboard(e, this) );\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    render(){\r\n        const matrixColor=['#22272b','#151D25'];//Matrix colors\r\n        const snakeColor='#00e59b';\r\n        const foodColor=\"red\";\r\n        const { matrix } = this.state;\r\n\r\n        return(\r\n            <div className=\"matrix\">\r\n                {matrix.map((row, i) => {\r\n                    return(\r\n                        row.map((col, j) => {\r\n                            switch(matrix[i][j]){\r\n                                case 0:\r\n                                    if((i+j)%2 === 0)\r\n                                        return <Pixel color={matrixColor[0]} key={(i,j)} />\r\n                                    else\r\n                                        return <Pixel color={matrixColor[1]} key={(i,j)}/>\r\n                                    //Create the board\r\n                                case 1:\r\n                                        return <Pixel color={snakeColor} key={(i,j)}/>\r\n                                        //Show snake\r\n                                case 2:\r\n                                        return <Pixel color={foodColor} key={(i,j)}/>\r\n                                        //Add food\r\n                                default:\r\n                                    break;\r\n\r\n                            }\r\n                            return 0;\r\n                        })\r\n                    )\r\n                })}\r\n            </div>\r\n        )}\r\n}\r\n\r\nexport default Matrix;","import React, {Component} from 'react';\nimport './App.css';\nimport Score from './Score';\nimport Matrix from './Matrix';\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.changeScore = this.changeScore.bind(this);//Function changeScore doesn't recognise \"this\" \n    this.state = {\n        score: 0,\n        bestScore: 0\n    }\n  } \n\n  changeBestScore(){\n    this.setState({bestScore: this.state.score});\n    window.localStorage.setItem('storedBestScore', this.state.score);\n  }\n\n  changeScore(newScore){\n    this.setState({score: newScore});\n    if(newScore > this.state.bestScore){\n      this.changeBestScore();\n    }\n  }\n\n  componentDidMount(){\n    let storedBestScore = Number(window.localStorage.getItem('storedBestScore'));\n\n    if (typeof storedBestScore === 'undefined' && storedBestScore === null){\n      window.localStorage.setItem('storedBestScore', '0');\n      this.setState({bestScore: 0});\n    }else{\n      this.setState({bestScore: storedBestScore});\n    }//Store bestScore in localStorage\n\n    console.log('%c React Snake Game', 'color:#00e59b; font-weight:bold');\n    //Signature\n  }\n\n  componentWillUnmount(){\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <div className=\"aspect-ratio\"> \n              <Score score={this.state.score} bestScore={this.state.bestScore}/>\n              <Matrix changeScore={this.changeScore}/>\n          </div>\n      </div>\n  )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}